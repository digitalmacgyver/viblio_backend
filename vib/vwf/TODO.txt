DEBUG:

Incorporate retry logic in configuration:

1) Max worker retries - if we exceed that we fail.
2) Timeout retries - if we exceed the number of array slots we fail

Add Mixpanel stuff.

Add a hook to Popeye.

We must manually set long timeouts on Face Recognition jobs that are
manual - we've set machine default type speeds in the pipeline
currently.

We can set the workflow_id manually in call to WorkflowType.start - we
probably should set it to be our media_uuid or something.  It will
show up in logs better.  Check on the requisite uniqueness of that
field - is it per execution, or all time, or what.

Document the failure details = JSON with retry : true or false.  - you
can call self.fail with a reason (256 chars), and a details
(stringified JSON with a mandatory "retry" value which must be True or
False)

Decide how to handle timeouts on the client side - right now we throw
a 400 bad request exception and die.  Should we print to a log and
return true?  I think I want this to die just to clean up stuff
periodically.

--

Window 1:

import boto.swf.layer2 as swf
import json
import pprint
pp = pprint.PrettyPrinter( indent = 4 )

execution = swf.WorkflowType( name='VideoProcessing', domain='Viblio', version='1.0.4' ).start( task_list='VPDecider', input = json.dumps( { 'media_uuid' : '1234', 'user_uuid' : '45567' } ) )

print pp.pprint( execution.history() )

Window 2-4

python -i VPDecider.py 
while VPDecider().run(): pass

python -i FaceDetect.py
while FaceDetect().run(): pass

python -i FaceRecognize.py
while FaceRecognize().run(): pass

==

FULL API DOCS:

http://docs.aws.amazon.com/amazonswf/latest/apireference/API_ActivityTaskCompletedEventAttributes.html
http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-about-workflows.html

DECISION TYPES:
http://docs.aws.amazon.com/amazonswf/latest/apireference/API_Decision.html

--

BUGS: 

1) Should pass KWargs from Layer2 constructor to Layer1?  Looks
like it might simply be a forgetful bug? 

If not, need a way to pass region through Layer2.

2) Domain class defaults retention to 30, no way to override it.

It's default should be the same as the AWS default, and should be a
configurable element.

3) activity / other Layer2 registrations shouldn't set defaults for
various timeouts.

4) Indentation in example with return True in decider.

5) The workflow_id generator will output duplicate workflow ids at the
same unix.time() - this can actually happen.

5) The simple demo assumes your decider is running before you start the task - otherwise the most recent task will be like DecisionTaskScheduled or something.

6) Docks say poll in activity task returns '' for taskToken when there
is nothing, but it doesn't, we get an empty dictionary.

7) Document that VPDecider assumes that each activity task is only run
once for a given workflow, our retry/timeout logic depends on this.

--

Eventually the task timed out (in this case task timeout was faster
than queue time out) and a new decision task is scheduled.  This
appears in the event history for the timeout:

    {   'activityTaskTimedOutEventAttributes': {   'scheduledEventId': 5,
                                                   'startedEventId': 6,
                                                   'timeoutType': 'START_TO_CLOSE'},
        'eventId': 7,
        'eventTimestamp': 1382306442.71,
        'eventType': 'ActivityTaskTimedOut'},

4) Get full flow for a workflow, not activity that times out.

When this happens, an event called: 'WorkflowExecutionTimedOut' as
added, and tha Workflow is moved to a status of CLOSED.  If the child
tasks tries to mark things as done they get a 400 Bad Request back
from the server.

5) What happens if a decider is killed while processing a thing?
The timeout and new decision event looks like:

    {   'decisionTaskTimedOutEventAttributes': {   'scheduledEventId': 2,
                                                   'startedEventId': 3,
                                                   'timeoutType': 'START_TO_CLOSE'},
        'eventId': 4,
        'eventTimestamp': 1382308347.929,
        'eventType': 'DecisionTaskTimedOut'},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '1',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 5,
        'eventTimestamp': 1382308347.929,
        'eventType': 'DecisionTaskScheduled'}]

This can happen if you try to reschedule something with the same activityId:
    {   'eventId': 12,
        'eventTimestamp': 1382377765.197,
        'eventType': 'ScheduleActivityTaskFailed',
        'scheduleActivityTaskFailedEventAttributes': {   'activityId': 'FaceDetect-1234',
                                                         'activityType': {   'name': 'FaceDetect',
                                                                             'version': '1.0.4'},
                                                         'cause': 'ACTIVITY_ID_ALREADY_IN_USE',
                                                         'decisionTaskCompletedEventId': 10}},



8) Check the job history when we get a failed state, what does it show
up as in the decider.

9) Write a manager wrapper that does the right things, tracks CPU.
Should this be threaded, and should it start many workers?

10 ) THINK ABOUT ERROR LOGIC, FATAL and/or RETRY with counters?  Retry with
growing time if time expires?

Can users specify non-fatal failures?

11) Integrate mixpanel stuff.

12) Integrate logly - try to log to syslog first and then to logly.

http://docs.aws.amazon.com/amazonswf/latest/apireference/API_RespondActivityTaskFailed.html

12) Start working on Rekognition in it.

--

Possible management tools: Chef, Puppet.

--

Logging and Metrics:

* In a queue model this is harder because the processing is distributed.

Groupon uses Splunk, but there is an open source alternative logstash.

There could also be third party solitions:

* Logly - log verbosely, times, durations, user_ids.  Push the
  complexity of analysis onto the logging solution.

-- 

For a queue based model, have a way to manually inject tasks into the
workflow for testing.


==== SAMPLE HISTORY WITH A DECISION TIMEOUT ==

>>> print pp.pprint( execution.history() )
[   {   'eventId': 1,
        'eventTimestamp': 1382306943.108,
        'eventType': 'WorkflowExecutionStarted',
        'workflowExecutionStartedEventAttributes': {   'childPolicy': 'TERMINATE',
                                                       'executionStartToCloseTimeout': '90',
                                                       'input': '{"media_uuid": "1234", "user_uuid": "45567"}',
                                                       'parentInitiatedEventId': 0,
                                                       'taskList': {   'name': 'TimeoutTest'},
                                                       'taskStartToCloseTimeout': '60',
                                                       'workflowType': {   'name': 'TimeoutTest',
                                                                           'version': '1.0'}}},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 2,
        'eventTimestamp': 1382306943.108,
        'eventType': 'DecisionTaskScheduled'},
    {   'decisionTaskStartedEventAttributes': {   'scheduledEventId': 2},
        'eventId': 3,
        'eventTimestamp': 1382306943.152,
        'eventType': 'DecisionTaskStarted'},
    {   'decisionTaskTimedOutEventAttributes': {   'scheduledEventId': 2,
                                                   'startedEventId': 3,
                                                   'timeoutType': 'START_TO_CLOSE'},
        'eventId': 4,
        'eventTimestamp': 1382307003.155,
        'eventType': 'DecisionTaskTimedOut'},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 5,
        'eventTimestamp': 1382307003.155,
        'eventType': 'DecisionTaskScheduled'},
    {   'decisionTaskStartedEventAttributes': {   'scheduledEventId': 5},
        'eventId': 6,
        'eventTimestamp': 1382307003.186,
        'eventType': 'DecisionTaskStarted'},
    {   'decisionTaskCompletedEventAttributes': {   'scheduledEventId': 5,
                                                    'startedEventId': 6},
        'eventId': 7,
        'eventTimestamp': 1382307013.374,
        'eventType': 'DecisionTaskCompleted'},
    {   'activityTaskScheduledEventAttributes': {   'activityId': 'activity id, an arbitrary string',
                                                    'activityType': {   'name': 'Upload',
                                                                        'version': '1.0.3'},
                                                    'decisionTaskCompletedEventId': 7,
                                                    'heartbeatTimeout': 'NONE',
                                                    'input': '{"arbitrary": ["string", "we", "use", "json"]}',
                                                    'scheduleToCloseTimeout': '1260',
                                                    'scheduleToStartTimeout': '1260',
                                                    'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'UploadTask'}},
        'eventId': 8,
        'eventTimestamp': 1382307013.374,
        'eventType': 'ActivityTaskScheduled'},
    {   'activityTaskStartedEventAttributes': {   'scheduledEventId': 8},
        'eventId': 9,
        'eventTimestamp': 1382307020.434,
        'eventType': 'ActivityTaskStarted'},
    {   'activityTaskCompletedEventAttributes': {   'result': '["we", "also", "return json"]',
                                                    'scheduledEventId': 8,
                                                    'startedEventId': 9},
        'eventId': 10,
        'eventTimestamp': 1382307025.542,
        'eventType': 'ActivityTaskCompleted'},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 11,
        'eventTimestamp': 1382307025.542,
        'eventType': 'DecisionTaskScheduled'},
    {   'decisionTaskStartedEventAttributes': {   'scheduledEventId': 11},
        'eventId': 12,
        'eventTimestamp': 1382307025.574,
        'eventType': 'DecisionTaskStarted'},
    {   'decisionTaskCompletedEventAttributes': {   'scheduledEventId': 11,
                                                    'startedEventId': 12},
        'eventId': 13,
        'eventTimestamp': 1382307025.892,
        'eventType': 'DecisionTaskCompleted'},
    {   'eventId': 14,
        'eventTimestamp': 1382307025.892,
        'eventType': 'WorkflowExecutionCompleted',
        'workflowExecutionCompletedEventAttributes': {   'decisionTaskCompletedEventId': 13}}]
None
