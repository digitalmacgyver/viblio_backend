Prod VWF server:

ssh matt@ec2-54-201-5-57.us-west-2.compute.amazonaws.com
ssh matt@ec2-54-201-6-12.us-west-2.compute.amazonaws.com

Staging vwf server:

ssh matt@ec2-50-112-50-4.us-west-2.compute.amazonaws.com

TODO:

0) Orphan faces

0) Job description of back end generalist

1) Document the architecture of the VWF pipeline.

2) Document how to deploy a VWF server.

PIPELINE STUFF:
5) Get face detection working on 2 or more prod machines
6) Get license server somewhere reliable and not a single point of failure

FB STUFF:
2) Get it installed on prod

3) Install pillow with pip install PIL on the machines where we will
run the FB sync dealy.

DB STUFF:
2) In prod, disable video_dev, video_dev_1

ORPHAN FACES:

Wrapper that runs it once every 6 hours
Supervisor that owns it

Logic:
  Similar to MTurk notify
  select * from MAF where recognition_result is null and contact_id is null and created_date > 2 days old
  create new contacts
  make link

On prod:
0) Upgrade boto on staging / prod
0) Install supervisor with easy_install


OLD DATA BELOW:
--

Window 1:

import boto.swf.layer2 as swf
import json
import pprint
pp = pprint.PrettyPrinter( indent = 4 )

execution = swf.WorkflowType( name='VideoProcessingLocal', domain='Viblio', version='1.0.4' ).start( task_list='VPDeciderLocal', input = json.dumps( { 'media_uuid' : '1234', 'user_uuid' : '45567' } ) )

print pp.pprint( execution.history() )

Window 2-4

python -i VPDecider.py 
while VPDecider().run(): pass

python -i FaceDetect.py
while FaceDetect().run(): pass

python -i FaceRecognize.py
while FaceRecognize().run(): pass

==

FULL API DOCS:

http://docs.aws.amazon.com/amazonswf/latest/apireference/API_ActivityTaskCompletedEventAttributes.html
http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-about-workflows.html

DECISION TYPES:
http://docs.aws.amazon.com/amazonswf/latest/apireference/API_Decision.html

--

BOTO SWF BUGS: 

1) Should pass KWargs from Layer2 constructor to Layer1?  Looks
like it might simply be a forgetful bug? 

If not, need a way to pass region through Layer2.

2) Domain class defaults retention to 30, no way to override it.

It's default should be the same as the AWS default, and should be a
configurable element.

3) activity / other Layer2 registrations shouldn't set defaults for
various timeouts.

4) Indentation in example with return True in decider.

5) The workflow_id generator will output duplicate workflow ids at the
same unix.time() - this can actually happen.

5) The simple demo assumes your decider is running before you start the task - otherwise the most recent task will be like DecisionTaskScheduled or something.

6) Docs say poll in activity task returns '' for taskToken when there
is nothing, but it doesn't, we get an empty dictionary.

7) Document that VPDecider assumes that each activity task is only run
once for a given workflow, our retry/timeout logic depends on this.

--

Eventually the task timed out (in this case task timeout was faster
than queue time out) and a new decision task is scheduled.  This
appears in the event history for the timeout:

    {   'activityTaskTimedOutEventAttributes': {   'scheduledEventId': 5,
                                                   'startedEventId': 6,
                                                   'timeoutType': 'START_TO_CLOSE'},
        'eventId': 7,
        'eventTimestamp': 1382306442.71,
        'eventType': 'ActivityTaskTimedOut'},

4) Get full flow for a workflow, not activity that times out.

When this happens, an event called: 'WorkflowExecutionTimedOut' as
added, and tha Workflow is moved to a status of CLOSED.  If the child
tasks tries to mark things as done they get a 400 Bad Request back
from the server.

5) What happens if a decider is killed while processing a thing?
The timeout and new decision event looks like:

    {   'decisionTaskTimedOutEventAttributes': {   'scheduledEventId': 2,
                                                   'startedEventId': 3,
                                                   'timeoutType': 'START_TO_CLOSE'},
        'eventId': 4,
        'eventTimestamp': 1382308347.929,
        'eventType': 'DecisionTaskTimedOut'},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '1',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 5,
        'eventTimestamp': 1382308347.929,
        'eventType': 'DecisionTaskScheduled'}]

This can happen if you try to reschedule something with the same activityId:
    {   'eventId': 12,
        'eventTimestamp': 1382377765.197,
        'eventType': 'ScheduleActivityTaskFailed',
        'scheduleActivityTaskFailedEventAttributes': {   'activityId': 'FaceDetect-1234',
                                                         'activityType': {   'name': 'FaceDetect',
                                                                             'version': '1.0.4'},
                                                         'cause': 'ACTIVITY_ID_ALREADY_IN_USE',
                                                         'decisionTaskCompletedEventId': 10}},

==== SAMPLE HISTORY WITH A DECISION TIMEOUT ==

>>> print pp.pprint( execution.history() )
[   {   'eventId': 1,
        'eventTimestamp': 1382306943.108,
        'eventType': 'WorkflowExecutionStarted',
        'workflowExecutionStartedEventAttributes': {   'childPolicy': 'TERMINATE',
                                                       'executionStartToCloseTimeout': '90',
                                                       'input': '{"media_uuid": "1234", "user_uuid": "45567"}',
                                                       'parentInitiatedEventId': 0,
                                                       'taskList': {   'name': 'TimeoutTest'},
                                                       'taskStartToCloseTimeout': '60',
                                                       'workflowType': {   'name': 'TimeoutTest',
                                                                           'version': '1.0'}}},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 2,
        'eventTimestamp': 1382306943.108,
        'eventType': 'DecisionTaskScheduled'},
    {   'decisionTaskStartedEventAttributes': {   'scheduledEventId': 2},
        'eventId': 3,
        'eventTimestamp': 1382306943.152,
        'eventType': 'DecisionTaskStarted'},
    {   'decisionTaskTimedOutEventAttributes': {   'scheduledEventId': 2,
                                                   'startedEventId': 3,
                                                   'timeoutType': 'START_TO_CLOSE'},
        'eventId': 4,
        'eventTimestamp': 1382307003.155,
        'eventType': 'DecisionTaskTimedOut'},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 5,
        'eventTimestamp': 1382307003.155,
        'eventType': 'DecisionTaskScheduled'},
    {   'decisionTaskStartedEventAttributes': {   'scheduledEventId': 5},
        'eventId': 6,
        'eventTimestamp': 1382307003.186,
        'eventType': 'DecisionTaskStarted'},
    {   'decisionTaskCompletedEventAttributes': {   'scheduledEventId': 5,
                                                    'startedEventId': 6},
        'eventId': 7,
        'eventTimestamp': 1382307013.374,
        'eventType': 'DecisionTaskCompleted'},
    {   'activityTaskScheduledEventAttributes': {   'activityId': 'activity id, an arbitrary string',
                                                    'activityType': {   'name': 'Upload',
                                                                        'version': '1.0.3'},
                                                    'decisionTaskCompletedEventId': 7,
                                                    'heartbeatTimeout': 'NONE',
                                                    'input': '{"arbitrary": ["string", "we", "use", "json"]}',
                                                    'scheduleToCloseTimeout': '1260',
                                                    'scheduleToStartTimeout': '1260',
                                                    'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'UploadTask'}},
        'eventId': 8,
        'eventTimestamp': 1382307013.374,
        'eventType': 'ActivityTaskScheduled'},
    {   'activityTaskStartedEventAttributes': {   'scheduledEventId': 8},
        'eventId': 9,
        'eventTimestamp': 1382307020.434,
        'eventType': 'ActivityTaskStarted'},
    {   'activityTaskCompletedEventAttributes': {   'result': '["we", "also", "return json"]',
                                                    'scheduledEventId': 8,
                                                    'startedEventId': 9},
        'eventId': 10,
        'eventTimestamp': 1382307025.542,
        'eventType': 'ActivityTaskCompleted'},
    {   'decisionTaskScheduledEventAttributes': {   'startToCloseTimeout': '60',
                                                    'taskList': {   'name': 'TimeoutTest'}},
        'eventId': 11,
        'eventTimestamp': 1382307025.542,
        'eventType': 'DecisionTaskScheduled'},
    {   'decisionTaskStartedEventAttributes': {   'scheduledEventId': 11},
        'eventId': 12,
        'eventTimestamp': 1382307025.574,
        'eventType': 'DecisionTaskStarted'},
    {   'decisionTaskCompletedEventAttributes': {   'scheduledEventId': 11,
                                                    'startedEventId': 12},
        'eventId': 13,
        'eventTimestamp': 1382307025.892,
        'eventType': 'DecisionTaskCompleted'},
    {   'eventId': 14,
        'eventTimestamp': 1382307025.892,
        'eventType': 'WorkflowExecutionCompleted',
        'workflowExecutionCompletedEventAttributes': {   'decisionTaskCompletedEventId': 13}}]
None
